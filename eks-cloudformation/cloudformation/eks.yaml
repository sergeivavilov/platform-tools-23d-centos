---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS cluster and network'
Parameters:
  # Note: 172.17.0.0/16 should never be used as VPC cidr because it collides with Docker's default internal cidr
  VpcBlock:
    Type: String
    # Default: 172.16.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  Subnet01Block:
    Type: String
    # Default: 172.16.64.0/18
    Description: CidrBlock for subnet 01 within the VPC
  Subnet02Block:
    Type: String
    # Default: 172.16.128.0/18
    Description: CidrBlock for subnet 02 within the VPC
  Subnet03Block:
    Type: String
    # Default: 172.16.192.0/18
    Description: CidrBlock for subnet 03 within the VPC
  Subnet01Az:
    Type: String
    Description: Avilability Zone for subnet 01 within the VPC
  Subnet02Az:
    Type: String
    Description: Avilability Zone for subnet 02 within the VPC
  Subnet03Az:
    Type: String
    Description: Avilability Zone for subnet 03 within the VPC
  ClusterVersion:
    Type: String
    Description: EKS cluster version
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - Subnet01Block
          - Subnet02Block
          - Subnet03Block
          - Subnet01Az
          - Subnet02Az
          - Subnet03Az
Resources:
  AWSServiceRoleForAmazonEKS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-vpc'
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public
  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - !Ref Subnet01Az
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet01"
  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - !Ref Subnet02Az
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet02"
  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - !Ref Subnet03Az
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet03"
  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable
  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable
  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${AWS::StackName}"
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt AWSServiceRoleForAmazonEKS.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref Subnet01
          - !Ref Subnet02
          - !Ref Subnet03
  EBSDriver:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: aws-ebs-csi-driver
      ClusterName: !Ref EKSCluster
  EBSDriverServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDC_PROVIDER}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDC_PROVIDER}:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                    "oidc.eks.${AWS::Region}.amazonaws.com/id/${OIDC_PROVIDER}:aud": "sts.amazonaws.com"
                  }
                }
              }
            ]
          }
        - OIDC_PROVIDER: !Select [0, !Split [".", !Select [1, !Split ["//", !GetAtt EKSCluster.Endpoint]]]]
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateSnapshot
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:ModifyVolume
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInstances
                  - ec2:DescribeSnapshots
                  - ec2:DescribeTags
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumesModifications
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - arn:aws:ec2:*:*:volume/*
                  - arn:aws:ec2:*:*:snapshot/*
                Condition:
                  StringEquals:
                    ec2:CreateAction:
                      - CreateVolume
                      - CreateSnapshot
              - Effect: Allow
                Action:
                  - ec2:DeleteTags
                Resource:
                  - arn:aws:ec2:*:*:volume/*
                  - arn:aws:ec2:*:*:snapshot/*
              - Effect: Allow
                Action:
                  - ec2:CreateVolume
                Resource: '*'
                Condition:
                  StringLike:
                    aws:RequestTag/ebs.csi.aws.com/cluster: "true"
              - Effect: Allow
                Action:
                  - ec2:CreateVolume
                Resource: '*'
                Condition:
                  StringLike:
                    aws:RequestTag/CSIVolumeName: '*'
              - Effect: Allow
                Action:
                  - ec2:DeleteVolume
                Resource: '*'
                Condition:
                  StringLike:
                    ec2:ResourceTag/CSIVolumeName: '*'
              - Effect: Allow
                Action:
                  - ec2:DeleteVolume
                Resource: '*'
                Condition:
                  StringLike:
                    ec2:ResourceTag/ebs.csi.aws.com/cluster: "true"
              - Effect: Allow
                Action:
                  - ec2:DeleteSnapshot
                Resource: '*'
                Condition:
                  StringLike:
                    ec2:ResourceTag/CSIVolumeSnapshotName: '*'
              - Effect: Allow
                Action:
                  - ec2:DeleteSnapshot
                Resource: '*'
                Condition:
                  StringLike:
                    ec2:ResourceTag/ebs.csi.aws.com/cluster: "true"
    
Outputs:
  RoleArn:
    Description: The role that EKS uses to create AWS resources for Kubernetes clusters
    Value: !GetAtt AWSServiceRoleForAmazonEKS.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"
  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03 ] ]
  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
  EksCluster:
    Description: The EKS cluster
    Value: !Ref EKSCluster
  RouteTable:
    Description: Routetable VPC
    Value: !Ref RouteTable
  EBSDriverRoleArn:
    Description: The role that EBS Driver uses
    Value: !GetAtt EBSDriverServiceRole.Arn
    Export:
      Name: "EBSDriverRoleArn"
